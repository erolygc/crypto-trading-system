#!/usr/bin/env python3
"""
Paper Trading Test Script
Sim√ºlasyon ortamƒ±nda trading sistemini test et
"""

import sys
import os
import time
from typing import Dict, List, Tuple
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import matplotlib.pyplot as plt

# Add current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Import custom modules
try:
    from position_sizing import PositionSizer, RiskConfig
    print("‚úÖ Position Sizer mod√ºl√º y√ºklendi")
except ImportError as e:
    print(f"‚ùå Position Sizer y√ºklenemedi: {e}")
    sys.exit(1)

# Try to import trading modules
try:
    from signal_generator import SignalGenerator
    print("‚úÖ Signal Generator y√ºklendi")
    signal_gen_available = True
except ImportError:
    print("‚ö†Ô∏è Signal Generator bulunamadƒ± - basit sinyaller kullanƒ±lacak")
    signal_gen_available = False

class PaperTrader:
    """
    Kaƒüƒ±t Trading Sim√ºlat√∂r√º
    """
    
    def __init__(self, initial_balance: float = 10000):
        self.initial_balance = initial_balance
        self.balance = initial_balance
        self.positions = []
        self.trades = []
        self.pnl_history = []
        self.position_sizer = PositionSizer()
        
    def calculate_portfolio_value(self, current_prices: Dict[str, float]) -> float:
        """Mevcut portf√∂y deƒüerini hesapla"""
        total_value = self.balance
        
        for position in self.positions:
            symbol = position['symbol']
            size = position['size']
            entry_price = position['entry_price']
            
            if symbol in current_prices:
                current_value = size * current_prices[symbol]
                entry_value = size * entry_price
                unrealized_pnl = current_value - entry_value
                total_value += unrealized_pnl
                
        return total_value
    
    def open_position(self, symbol: str, entry_price: float, size: float, 
                     stop_loss: float, strategy_type: str = "fixed_fractional") -> bool:
        """Yeni pozisyon a√ß"""
        if size > self.balance:
            return False
            
        position = {
            'symbol': symbol,
            'size': size,
            'entry_price': entry_price,
            'stop_loss': stop_loss,
            'strategy': strategy_type,
            'timestamp': datetime.now()
        }
        
        self.positions.append(position)
        self.balance -= size
        
        print(f"üìà Pozisyon a√ßƒ±ldƒ±: {symbol} - {size:.2f} @ {entry_price}")
        return True
    
    def close_position(self, position: dict, exit_price: float, reason: str = "Exit") -> float:
        """Pozisyonu kapat"""
        size = position['size']
        entry_price = position['entry_price']
        symbol = position['symbol']
        
        pnl = (exit_price - entry_price) * size
        
        # Trade kaydƒ±
        trade = {
            'symbol': symbol,
            'size': size,
            'entry_price': entry_price,
            'exit_price': exit_price,
            'pnl': pnl,
            'reason': reason,
            'timestamp': datetime.now()
        }
        
        self.trades.append(trade)
        self.balance += size + pnl
        
        print(f"üìâ Pozisyon kapandƒ±: {symbol} - PnL: {pnl:.2f} ({reason})")
        return pnl
    
    def check_stop_losses(self, current_prices: Dict[str, float]) -> List[dict]:
        """Stop loss kontrol√º"""
        closed_positions = []
        
        for position in self.positions[:]:  # Liste √ºzerinde iterasyon
            symbol = position['symbol']
            stop_loss = position['stop_loss']
            
            if symbol in current_prices:
                current_price = current_prices[symbol]
                
                # Long pozisyon i√ßin stop loss kontrol√º
                if current_price <= stop_loss:
                    closed_positions.append((position, current_price, "Stop Loss"))
                    self.positions.remove(position)
                    
        return closed_positions
    
    def generate_simple_signal(self, df: pd.DataFrame) -> str:
        """Basit sinyal √ºreteci (MA crossover)"""
        if len(df) < 20:
            return "HOLD"
            
        # 5 ve 20 periodluk MA
        df['MA5'] = df['close'].rolling(5).mean()
        df['MA20'] = df['close'].rolling(20).mean()
        
        if pd.isna(df['MA5'].iloc[-1]) or pd.isna(df['MA20'].iloc[-1]):
            return "HOLD"
            
        # Golden Cross: MA5, MA20'yi yukarƒ± kesiyor
        if df['MA5'].iloc[-2] <= df['MA20'].iloc[-2] and df['MA5'].iloc[-1] > df['MA20'].iloc[-1]:
            return "BUY"
            
        # Death Cross: MA5, MA20'yi a≈üaƒüƒ± kesiyor  
        if df['MA5'].iloc[-2] >= df['MA20'].iloc[-2] and df['MA5'].iloc[-1] < df['MA20'].iloc[-1]:
            return "SELL"
            
        return "HOLD"
    
    def start_simulation(self, data: Dict[str, pd.DataFrame], duration_days: int = 7):
        """Sim√ºlasyon ba≈ülat"""
        print(f"üöÄ Paper Trading Sim√ºlasyonu Ba≈ülƒ±yor...")
        print(f"üìä S√ºre: {duration_days} g√ºn")
        print(f"üí∞ Ba≈ülangƒ±√ß Bakiyesi: ${self.initial_balance:.2f}")
        print("=" * 50)
        
        start_date = datetime.now()
        
        for day in range(duration_days):
            print(f"\nüìÖ G√ºn {day + 1} - {start_date + timedelta(days=day):%Y-%m-%d}")
            
            # Her sembol i√ßin i≈ülem kontrol√º
            for symbol, df in data.items():
                if len(df) == 0:
                    continue
                    
                current_price = df['close'].iloc[-1]
                
                # Sinyal √ºret
                signal = self.generate_simple_signal(df)
                
                # Pozisyon y√∂netimi
                existing_position = next((p for p in self.positions if p['symbol'] == symbol), None)
                
                if signal == "BUY" and not existing_position:
                    # Yeni pozisyon a√ß
                    entry_price = current_price
                    stop_loss = entry_price * 0.95  # %5 stop loss
                    
                    position_size = self.position_sizer.calculate_position_size(
                        symbol=symbol,
                        entry_price=entry_price,
                        stop_loss=stop_loss,
                        portfolio_value=self.balance,
                        strategy_type="fixed_fractional"
                    )
                    
                    if position_size['size'] > 0:
                        self.open_position(symbol, entry_price, position_size['size'], stop_loss)
                        
                elif signal == "SELL" and existing_position:
                    # Pozisyon kapat
                    self.close_position(existing_position, current_price, "Signal Exit")
            
            # Stop loss kontrol√º
            current_prices = {symbol: df['close'].iloc[-1] for symbol, df in data.items() if len(df) > 0}
            closed = self.check_stop_losses(current_prices)
            
            for position, exit_price, reason in closed:
                self.close_position(position, exit_price, reason)
            
            # Portf√∂y durumu
            portfolio_value = self.calculate_portfolio_value(current_prices)
            daily_pnl = portfolio_value - (self.initial_balance + sum([t['pnl'] for t in self.trades]))
            
            self.pnl_history.append({
                'date': start_date + timedelta(days=day),
                'portfolio_value': portfolio_value,
                'daily_pnl': daily_pnl,
                'balance': self.balance
            })
            
            print(f"üíº Portf√∂y Deƒüeri: ${portfolio_value:.2f}")
            print(f"üìà G√ºnl√ºk P&L: ${daily_pnl:.2f}")
            print(f"üíµ Mevcut Bakiye: ${self.balance:.2f}")
            print(f"üìä Aktif Pozisyonlar: {len(self.positions)}")
    
    def generate_report(self) -> str:
        """Sim√ºlasyon raporu √ºret"""
        if not self.pnl_history:
            return "Hen√ºz sim√ºlasyon yapƒ±lmadƒ±."
            
        final_value = self.pnl_history[-1]['portfolio_value']
        total_return = ((final_value - self.initial_balance) / self.initial_balance) * 100
        
        winning_trades = [t for t in self.trades if t['pnl'] > 0]
        losing_trades = [t for t in self.trades if t['pnl'] < 0]
        
        win_rate = len(winning_trades) / len(self.trades) * 100 if self.trades else 0
        
        report = f"""
üìä PAPER TRADING Sƒ∞M√úLASYONU RAPORU
=====================================
üí∞ Ba≈ülangƒ±√ß Bakiyesi: ${self.initial_balance:.2f}
üìà Final Portf√∂y Deƒüeri: ${final_value:.2f}
üéØ Toplam Getiri: {total_return:.2f}%

üìà ƒ∞≈ûLEM ƒ∞STATƒ∞STƒ∞KLERƒ∞:
‚Ä¢ Toplam ƒ∞≈ülem: {len(self.trades)}
‚Ä¢ Kazanan ƒ∞≈ülem: {len(winning_trades)}
‚Ä¢ Kaybeden ƒ∞≈ülem: {len(losing_trades)}
‚Ä¢ Ba≈üarƒ± Oranƒ±: {win_rate:.1f}%

üíµ KAR/ZARAR DETAYLARI:
‚Ä¢ Toplam Kar: ${sum([t['pnl'] for t in winning_trades]):.2f}
‚Ä¢ Toplam Zarar: ${sum([t['pnl'] for t in losing_trades]):.2f}
‚Ä¢ Net P&L: ${sum([t['pnl'] for t in self.trades]):.2f}

üé≤ ORTALAMA ƒ∞≈ûLEM:
‚Ä¢ Ortalama Kazan√ß: ${np.mean([t['pnl'] for t in winning_trades]):.2f} (Kazanan)
‚Ä¢ Ortalama Kayƒ±p: ${np.mean([t['pnl'] for t in losing_trades]):.2f} (Kaybeden)
"""
        
        if self.trades:
            best_trade = max(self.trades, key=lambda x: x['pnl'])
            worst_trade = min(self.trades, key=lambda x: x['pnl'])
            
            report += f"""
üèÜ EN ƒ∞Yƒ∞ ƒ∞≈ûLEM:
‚Ä¢ {best_trade['symbol']}: ${best_trade['pnl']:.2f} (Exit: {best_trade['reason']})

üí∏ EN K√ñT√ú ƒ∞≈ûLEM:
‚Ä¢ {worst_trade['symbol']}: ${worst_trade['pnl']:.2f} (Exit: {worst_trade['reason']})
"""
        
        return report
    
    def plot_performance(self, save_path: str = "paper_trading_results.png"):
        """Performans grafiƒüi √ßiz"""
        if not self.pnl_history:
            print("Performans verisi bulunamadƒ±.")
            return
            
        plt.figure(figsize=(12, 8))
        
        dates = [p['date'] for p in self.pnl_history]
        portfolio_values = [p['portfolio_value'] for p in self.pnl_history]
        balances = [p['balance'] for p in self.pnl_history]
        
        # Portf√∂y deƒüeri grafiƒüi
        plt.subplot(2, 1, 1)
        plt.plot(dates, portfolio_values, label='Portf√∂y Deƒüeri', linewidth=2)
        plt.axhline(y=self.initial_balance, color='r', linestyle='--', label='Ba≈ülangƒ±√ß')
        plt.title('Paper Trading - Portf√∂y Deƒüeri')
        plt.ylabel('Deƒüer ($)')
        plt.legend()
        plt.grid(True)
        
        # G√ºnl√ºk P&L grafiƒüi
        plt.subplot(2, 1, 2)
        daily_pnls = [p['daily_pnl'] for p in self.pnl_history]
        colors = ['green' if pnl >= 0 else 'red' for pnl in daily_pnls]
        plt.bar(dates, daily_pnls, color=colors, alpha=0.7)
        plt.title('G√ºnl√ºk P&L')
        plt.ylabel('P&L ($)')
        plt.xlabel('Tarih')
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        print(f"üìà Performans grafiƒüi kaydedildi: {save_path}")
        plt.show()

def create_sample_data(symbols: List[str], days: int = 30) -> Dict[str, pd.DataFrame]:
    """√ñrnek veri √ºret (test i√ßin)"""
    np.random.seed(42)  # Sabit sonu√ßlar i√ßin
    data = {}
    
    for symbol in symbols:
        dates = pd.date_range(start=datetime.now() - timedelta(days=days), 
                             end=datetime.now(), freq='H')
        
        # Rastgele fiyat hareketi sim√ºlasyonu
        returns = np.random.normal(0, 0.02, len(dates))
        prices = [50000]  # Ba≈ülangƒ±√ß fiyatƒ± (BTC i√ßin)
        
        for i in range(1, len(dates)):
            new_price = prices[-1] * (1 + returns[i])
            prices.append(new_price)
        
        # DataFrame olu≈ütur
        df = pd.DataFrame({
            'timestamp': dates,
            'open': prices,
            'high': [p * 1.01 for p in prices],
            'low': [p * 0.99 for p in prices],
            'close': prices,
            'volume': np.random.uniform(100, 1000, len(dates))
        })
        
        data[symbol] = df
        
    return data

def main():
    """Ana test fonksiyonu"""
    print("üöÄ Paper Trading Test Sistemi")
    print("=" * 40)
    
    # Test verileri olu≈ütur
    test_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT']
    data = create_sample_data(test_symbols, days=14)
    
    print(f"üìä Test verileri olu≈üturuldu: {len(test_symbols)} sembol")
    
    # Paper trader olu≈ütur
    trader = PaperTrader(initial_balance=10000)
    
    # Sim√ºlasyon ba≈ülat
    trader.start_simulation(data, duration_days=7)
    
    # Rapor √ºret
    print("\n" + "=" * 50)
    print(trader.generate_report())
    
    # Performans grafiƒüi
    try:
        trader.plot_performance()
    except Exception as e:
        print(f"‚ö†Ô∏è Grafik olu≈üturulamadƒ±: {e}")
    
    print("\n‚úÖ Paper Trading testi tamamlandƒ±!")

if __name__ == "__main__":
    main()